#! /usr/bin/env node

const stringify = require('javascript-stringify');
const { compile } = require('ejs');
const omit = require('object.omit');
const { readFileSync, writeFileSync } = require('fs');
const { join } = require('path');
const fetchApis = require('./fetch-apis');

const src = join(__dirname, '../src');
const template = compile(readFileSync(join(__dirname, '../templates/client.ejs'), 'utf-8'));
const index = readFileSync(join(src, 'index.js'), 'utf-8');

fetchApis()
  .then(apis => {
    const exports = Object
      .keys(apis)
      .sort()
      .reduce((exports, name, index, context) => {
        const client = apis[name];

        writeFileSync(
          join(src, `clients/${name}.js`),
          template({
            name,
            stringify,
            omit,
            baseUrl: client.reference.baseUrl,
            exchangePrefix: client.reference.exchangePrefix,
            methods: client.reference.entries
              .filter(({ type }) => type === 'function')
              .map(entry => {
                if (entry.input) {
                  entry.input = true;
                }

                if (entry.output) {
                  entry.output = true;
                }

                return entry;
              }),
            topics: client.reference.entries
              .filter(({ type }) => type === 'topic-exchange')
              .map(entry => Object.assign(entry, {
                routingKey: entry.routingKey.map(route => omit(route, ['summary']))
              }))
          }),
          { encoding: 'utf-8' }
        );

        return `${exports}export { default as ${name} } from './clients/${name}';${index === context.length - 1 ? '' : '\n'}`;
      }, '');

    writeFileSync(
      join(src, 'index.js'),
      index.replace(
        /\/\/ AUTOGENERATED-START([\s\S]*?)\/\/ AUTOGENERATED-END/gmi,
        `// AUTOGENERATED-START\n${exports}\n// AUTOGENERATED-END`
      ),
      { encoding: 'utf-8' }
    );
  })
  .catch(err => console.error(err));
